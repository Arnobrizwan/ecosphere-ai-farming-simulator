import Constants from 'expo-constants';

/**
 * Translation Service for UC3 Profile Setup
 * Provides Bangla translations for the app
 * Uses static translations (no API needed for better performance)
 */

const translations = {
  en: {
    // Profile Setup - Step 1
    'profile.step1.title': 'ЁЯОо Customize Your Character',
    'profile.step1.subtitle': "Let's create your farming avatar",
    'profile.fullName': 'Full Name',
    'profile.fullName.placeholder': 'Enter your full name',
    'profile.avatar': 'Choose Your Avatar',
    'profile.gender': 'Gender (Optional)',
    'profile.gender.male': 'Male',
    'profile.gender.female': 'Female',
    'profile.gender.other': 'Other',
    'profile.age': 'Age (Optional)',
    'profile.age.placeholder': 'Enter your age',
    'profile.location': 'Location (Optional)',
    'profile.location.placeholder': 'e.g., Dhaka, Bangladesh',
    'profile.language': 'Language Preference',

    // Profile Setup - Step 2 (Farmer)
    'profile.step2.farmer.title': 'ЁЯМ╛ Your Farming Profile',
    'profile.step2.farmer.subtitle': 'Tell us about your farm',
    'profile.crops': 'Primary Crops (Select all that apply)',
    'profile.crops.rice': 'Rice',
    'profile.crops.wheat': 'Wheat',
    'profile.crops.vegetables': 'Vegetables',
    'profile.crops.fruits': 'Fruits',
    'profile.crops.livestock': 'Livestock',
    'profile.crops.poultry': 'Poultry',
    'profile.farmSize': 'Farm Size',
    'profile.farmSize.acres': 'acres',
    'profile.experience': 'Experience Level',
    'profile.experience.beginner': 'Beginner',
    'profile.experience.beginner.desc': 'Just starting out',
    'profile.experience.intermediate': 'Intermediate',
    'profile.experience.intermediate.desc': '1-5 years experience',
    'profile.experience.advanced': 'Advanced',
    'profile.experience.advanced.desc': '5+ years experience',

    // Profile Setup - Step 2 (Student)
    'profile.step2.student.title': 'ЁЯУЪ Learning Goals',
    'profile.step2.student.subtitle': 'Tell us about your studies',
    'profile.gradeLevel': 'Grade Level',
    'profile.gradeLevel.placeholder': 'e.g., Grade 10',
    'profile.schoolName': 'School Name (Optional)',
    'profile.schoolName.placeholder': 'Enter your school name',
    'profile.interests': 'Learning Interests',
    'profile.interests.sustainable': 'Sustainable Farming',
    'profile.interests.technology': 'Farm Technology',
    'profile.interests.business': 'Agri-Business',
    'profile.interests.science': 'Agricultural Science',

    // Profile Setup - Step 3
    'profile.step3.title': 'тЪЩя╕П Preferences',
    'profile.step3.subtitle': 'Customize your experience',
    'profile.notifications': 'Notification Preferences',
    'profile.notifications.weather': 'Weather Alerts',
    'profile.notifications.tips': 'Farming Tips',
    'profile.notifications.community': 'Community Updates',
    'profile.units': 'Measurement Units',
    'profile.units.metric': 'Metric',
    'profile.units.metric.desc': '(kg, m, ┬░C)',
    'profile.units.imperial': 'Imperial',
    'profile.units.imperial.desc': '(lb, ft, ┬░F)',
    'profile.reminderTime': 'Best Time for Reminders',
    'profile.reminderTime.morning': 'Morning',
    'profile.reminderTime.afternoon': 'Afternoon',
    'profile.reminderTime.evening': 'Evening',

    // Navigation
    'nav.back': 'тЖР Back',
    'nav.next': 'Next тЖТ',
    'nav.finish': 'ЁЯОЙ Finish',
    'nav.saveChanges': 'тЬЕ Save Changes',
    'nav.saveDraft': 'ЁЯТ╛ Save Draft',
    'nav.autoSave': 'ЁЯТб Auto-saves every 30 seconds',

    // Alerts
    'alert.required': 'тЪая╕П Required',
    'alert.nameRequired': 'Please enter your full name',
    'alert.cropsRequired': 'Please select at least one crop',
    'alert.experienceRequired': 'Please select your experience level',
    'alert.gradeLevelRequired': 'Please enter your grade level',
    'alert.draftSaved': 'тЬЕ Draft Saved',
    'alert.draftSaved.message': 'Your progress has been saved.',
    'alert.saveFailed': 'тЪая╕П Save Failed',
    'alert.saveFailed.message': 'Could not save draft. Please try again.',
    'alert.profileComplete': 'ЁЯОЙ Profile Complete!',
    'alert.profileComplete.message': 'Your profile is {percent}% complete!',
    'alert.saveProgress': 'ЁЯТ╛ Save Progress?',
    'alert.saveProgress.message': 'Do you want to save your progress as a draft?',
    'alert.discard': 'Discard',

    // Profile Screen
    'profile.title': 'ЁЯСд Profile',
    'profile.farmer': 'ЁЯМ╛ Farmer',
    'profile.student': 'ЁЯУЪ Student',
    'profile.email': 'Email:',
    'profile.memberSince': 'Member Since:',
    'profile.completion': 'Profile Completion:',
    'profile.editProfile': 'тЬПя╕П Edit Profile',
    'profile.backToDashboard': 'тЖР Back to Dashboard',
  },

  bn: {
    // Profile Setup - Step 1
    'profile.step1.title': 'ЁЯОо ржЖржкржирж╛рж░ ржЪрж░рж┐рждрзНрж░ ржХрж╛рж╕рзНржЯржорж╛ржЗржЬ ржХрж░рзБржи',
    'profile.step1.subtitle': 'ржЪрж▓рзБржи ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ ржЕржмрждрж╛рж░ рждрзИрж░рж┐ ржХрж░рж┐',
    'profile.fullName': 'ржкрзБрж░рзЛ ржирж╛ржо',
    'profile.fullName.placeholder': 'ржЖржкржирж╛рж░ ржкрзБрж░рзЛ ржирж╛ржо рж▓рж┐ржЦрзБржи',
    'profile.avatar': 'ржЖржкржирж╛рж░ ржЕржмрждрж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
    'profile.gender': 'рж▓рж┐ржЩрзНржЧ (ржРржЪрзНржЫрж┐ржХ)',
    'profile.gender.male': 'ржкрзБрж░рзБрж╖',
    'profile.gender.female': 'ржорж╣рж┐рж▓рж╛',
    'profile.gender.other': 'ржЕржирзНржпрж╛ржирзНржп',
    'profile.age': 'ржмржпрж╝рж╕ (ржРржЪрзНржЫрж┐ржХ)',
    'profile.age.placeholder': 'ржЖржкржирж╛рж░ ржмржпрж╝рж╕ рж▓рж┐ржЦрзБржи',
    'profile.location': 'ржЕржмрж╕рзНржерж╛ржи (ржРржЪрзНржЫрж┐ржХ)',
    'profile.location.placeholder': 'ржпрзЗржоржи, ржврж╛ржХрж╛, ржмрж╛ржВрж▓рж╛ржжрзЗрж╢',
    'profile.language': 'ржнрж╛рж╖рж╛рж░ ржкржЫржирзНржж',

    // Profile Setup - Step 2 (Farmer)
    'profile.step2.farmer.title': 'ЁЯМ╛ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ ржкрзНрж░рзЛржлрж╛ржЗрж▓',
    'profile.step2.farmer.subtitle': 'ржЖржкржирж╛рж░ ржЦрж╛ржорж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи',
    'profile.crops': 'ржкрзНрж░ржзрж╛ржи ржлрж╕рж▓ (рж╕ржм ржкрзНрж░ржпрзЛржЬрзНржп ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи)',
    'profile.crops.rice': 'ржзрж╛ржи',
    'profile.crops.wheat': 'ржЧржо',
    'profile.crops.vegetables': 'рж╕ржмржЬрж┐',
    'profile.crops.fruits': 'ржлрж▓',
    'profile.crops.livestock': 'ржкрж╢рзБрж╕ржорзНржкржж',
    'profile.crops.poultry': 'рж╣рж╛ржБрж╕-ржорзБрж░ржЧрж┐',
    'profile.farmSize': 'ржЦрж╛ржорж╛рж░рзЗрж░ ржЖржХрж╛рж░',
    'profile.farmSize.acres': 'ржПржХрж░',
    'profile.experience': 'ржЕржнрж┐ржЬрзНржЮрждрж╛ рж╕рзНрждрж░',
    'profile.experience.beginner': 'рж╢рж┐ржХрзНрж╖рж╛ржиржмрж┐рж╕',
    'profile.experience.beginner.desc': 'рж╕ржмрзЗржорж╛рждрзНрж░ рж╢рзБрж░рзБ ржХрж░ржЫрж┐',
    'profile.experience.intermediate': 'ржоржзрзНржпржмрж░рзНрждрзА',
    'profile.experience.intermediate.desc': 'рзз-рзл ржмржЫрж░рзЗрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛',
    'profile.experience.advanced': 'ржЙржирзНржиржд',
    'profile.experience.advanced.desc': 'рзл+ ржмржЫрж░рзЗрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛',

    // Profile Setup - Step 2 (Student)
    'profile.step2.student.title': 'ЁЯУЪ рж╢рзЗржЦрж╛рж░ рж▓ржХрзНрж╖рзНржп',
    'profile.step2.student.subtitle': 'ржЖржкржирж╛рж░ ржкржбрж╝рж╛рж╢рзЛржирж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж▓рзБржи',
    'profile.gradeLevel': 'рж╢рзНрж░рзЗржгрзА рж╕рзНрждрж░',
    'profile.gradeLevel.placeholder': 'ржпрзЗржоржи, ржжрж╢ржо рж╢рзНрж░рзЗржгрзА',
    'profile.schoolName': 'рж╕рзНржХрзБрж▓рзЗрж░ ржирж╛ржо (ржРржЪрзНржЫрж┐ржХ)',
    'profile.schoolName.placeholder': 'ржЖржкржирж╛рж░ рж╕рзНржХрзБрж▓рзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи',
    'profile.interests': 'рж╢рзЗржЦрж╛рж░ ржЖржЧрзНрж░рж╣',
    'profile.interests.sustainable': 'ржЯрзЗржХрж╕ржЗ ржХрзГрж╖рж┐',
    'profile.interests.technology': 'ржЦрж╛ржорж╛рж░ ржкрзНрж░ржпрзБржХрзНрждрж┐',
    'profile.interests.business': 'ржХрзГрж╖рж┐-ржмрзНржпржмрж╕рж╛',
    'profile.interests.science': 'ржХрзГрж╖рж┐ ржмрж┐ржЬрзНржЮрж╛ржи',

    // Profile Setup - Step 3
    'profile.step3.title': 'тЪЩя╕П ржкржЫржирзНржжрж╕ржорзВрж╣',
    'profile.step3.subtitle': 'ржЖржкржирж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржХрж╛рж╕рзНржЯржорж╛ржЗржЬ ржХрж░рзБржи',
    'profile.notifications': 'ржмрж┐ржЬрзНржЮржкрзНрждрж┐ ржкржЫржирзНржж',
    'profile.notifications.weather': 'ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛',
    'profile.notifications.tips': 'ржХрзГрж╖рж┐ ржкрж░рж╛ржорж░рзНрж╢',
    'profile.notifications.community': 'рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝ ржЖржкржбрзЗржЯ',
    'profile.units': 'ржкрж░рж┐ржорж╛ржк ржПржХржХ',
    'profile.units.metric': 'ржорзЗржЯрзНрж░рж┐ржХ',
    'profile.units.metric.desc': '(ржХрзЗржЬрж┐, ржорж┐ржЯрж╛рж░, ┬░рж╕рзЗ)',
    'profile.units.imperial': 'ржЗржорзНржкрзЗрж░рж┐ржпрж╝рж╛рж▓',
    'profile.units.imperial.desc': '(ржкрж╛ржЙржирзНржб, ржлрзБржЯ, ┬░ржлрж╛)',
    'profile.reminderTime': 'ржЕржирзБрж╕рзНржорж╛рж░ржХ ржЬржирзНржп рж╕рзЗрж░рж╛ рж╕ржоржпрж╝',
    'profile.reminderTime.morning': 'рж╕ржХрж╛рж▓',
    'profile.reminderTime.afternoon': 'ржмрж┐ржХрж╛рж▓',
    'profile.reminderTime.evening': 'рж╕ржирзНржзрзНржпрж╛',

    // Navigation
    'nav.back': 'тЖР ржкрж┐ржЫржирзЗ',
    'nav.next': 'ржкрж░ржмрж░рзНрждрзА тЖТ',
    'nav.finish': 'ЁЯОЙ рж╕ржорж╛ржкрзНржд',
    'nav.saveChanges': 'тЬЕ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи',
    'nav.saveDraft': 'ЁЯТ╛ ржЦрж╕ржбрж╝рж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи',
    'nav.autoSave': 'ЁЯТб ржкрзНрж░рждрж┐ рзйрзж рж╕рзЗржХрзЗржирзНржбрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝',

    // Alerts
    'alert.required': 'тЪая╕П ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝',
    'alert.nameRequired': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзБрж░рзЛ ржирж╛ржо рж▓рж┐ржЦрзБржи',
    'alert.cropsRequired': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХржоржкржХрзНрж╖рзЗ ржПржХржЯрж┐ ржлрж╕рж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
    'alert.experienceRequired': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ рж╕рзНрждрж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
    'alert.gradeLevelRequired': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ рж╢рзНрж░рзЗржгрзА рж╕рзНрждрж░ рж▓рж┐ржЦрзБржи',
    'alert.draftSaved': 'тЬЕ ржЦрж╕ржбрж╝рж╛ рж╕ржВрж░ржХрзНрж╖рж┐ржд',
    'alert.draftSaved.message': 'ржЖржкржирж╛рж░ ржЕржЧрзНрж░ржЧрждрж┐ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗред',
    'alert.saveFailed': 'тЪая╕П рж╕ржВрж░ржХрзНрж╖ржг ржмрзНржпрж░рзНрже',
    'alert.saveFailed.message': 'ржЦрж╕ржбрж╝рж╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
    'alert.profileComplete': 'ЁЯОЙ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрзВрж░рзНржг!',
    'alert.profileComplete.message': 'ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ {percent}% рж╕ржорзНржкрзВрж░рзНржг!',
    'alert.saveProgress': 'ЁЯТ╛ ржЕржЧрзНрж░ржЧрждрж┐ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи?',
    'alert.saveProgress.message': 'ржЖржкржирж┐ ржХрж┐ ржЖржкржирж╛рж░ ржЕржЧрзНрж░ржЧрждрж┐ ржЦрж╕ржбрж╝рж╛ рж╣рж┐рж╕рж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рждрзЗ ржЪрж╛ржи?',
    'alert.discard': 'ржмрж╛рждрж┐рж▓ ржХрж░рзБржи',

    // Profile Screen
    'profile.title': 'ЁЯСд ржкрзНрж░рзЛржлрж╛ржЗрж▓',
    'profile.farmer': 'ЁЯМ╛ ржХрзГрж╖ржХ',
    'profile.student': 'ЁЯУЪ ржЫрж╛рждрзНрж░',
    'profile.email': 'ржЗржорзЗржЗрж▓:',
    'profile.memberSince': 'рж╕ржжрж╕рзНржп ржпржЦржи ржерзЗржХрзЗ:',
    'profile.completion': 'ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрзВрж░рзНржгрждрж╛:',
    'profile.editProfile': 'тЬПя╕П ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕ржорзНржкрж╛ржжржирж╛ ржХрж░рзБржи',
    'profile.backToDashboard': 'тЖР ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржбрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи',
  }
};

const getGoogleTranslateApiKey = () => {
  const extra = Constants?.expoConfig?.extra ?? {};
  return extra.googleTranslateApiKey ?? process.env.EXPO_PUBLIC_GOOGLE_TRANSLATE_API_KEY ?? null;
};

const translateWithGoogle = async (text, target = 'bn', source = 'en') => {
  const trimmed = text?.toString().trim();
  if (!trimmed) {
    return '';
  }

  const apiKey = getGoogleTranslateApiKey();

  if (!apiKey) {
    throw new Error('Google Translate API key not configured. Set googleTranslateApiKey in app config or EXPO_PUBLIC_GOOGLE_TRANSLATE_API_KEY.');
  }

  const endpoint = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        q: trimmed,
        target,
        source,
        format: 'text'
      })
    });

    const payload = await response.json();

    if (!response.ok) {
      const message = payload?.error?.message ?? 'Translation request failed.';
      throw new Error(message);
    }

    const translated = payload?.data?.translations?.[0]?.translatedText;

    if (!translated) {
      throw new Error('Translation response missing translated text.');
    }

    return translated;
  } catch (error) {
    console.error('Google Translate API error:', error);
    throw error;
  }
};

export const translationService = {
  /**
   * Get translated text
   * @param {string} key - Translation key (e.g., 'profile.fullName')
   * @param {string} language - Language code ('en' or 'bn')
   * @param {Object} params - Optional parameters for interpolation
   * @returns {string} - Translated text
   */
  t: (key, language = 'en', params = {}) => {
    const lang = translations[language] || translations.en;
    let text = lang[key] || translations.en[key] || key;

    // Replace parameters like {percent} with actual values
    if (params) {
      Object.keys(params).forEach(param => {
        text = text.replace(`{${param}}`, params[param]);
      });
    }

    return text;
  },

  /**
   * Get all translations for a language
   * @param {string} language - Language code
   * @returns {Object} - All translations
   */
  getAll: (language = 'en') => {
    return translations[language] || translations.en;
  },

  /**
   * Check if a language is supported
   * @param {string} language - Language code
   * @returns {boolean}
   */
  isSupported: (language) => {
    return translations.hasOwnProperty(language);
  },

  /**
   * Get available languages
   * @returns {Array} - Array of language codes
   */
  getAvailableLanguages: () => {
    return Object.keys(translations);
  },

  /**
   * Get language name
   * @param {string} language - Language code
   * @returns {string} - Language name
   */
  getLanguageName: (language) => {
    const names = {
      en: 'English',
      bn: 'ржмрж╛ржВрж▓рж╛'
    };
    return names[language] || language;
  },

  /**
   * Get language flag emoji
   * @param {string} language - Language code
   * @returns {string} - Flag emoji
   */
  getLanguageFlag: (language) => {
    const flags = {
      en: 'ЁЯЗмЁЯЗз',
      bn: 'ЁЯЗзЁЯЗй'
    };
    return flags[language] || 'ЁЯМР';
  },

  /**
   * Translate text using Google Translate API
   * @param {string} text - Source text
   * @param {string} target - Target language code (default 'bn')
   * @param {string} source - Source language code (default 'en')
   * @returns {Promise<string>}
   */
  translateWithGoogle: (text, target = 'bn', source = 'en') => translateWithGoogle(text, target, source),

  /**
   * Convenience helper to translate English to Bangla
   * @param {string} text - English text
   * @returns {Promise<string>} - Bangla translation
   */
  translateEnToBn: (text) => translateWithGoogle(text, 'bn', 'en')
};

export default translationService;
